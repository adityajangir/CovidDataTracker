{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","mulitiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","attribution","url","Table","options","elements","point","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","display","ticks","callback","value","index","values","maintainAspectRatio","plugins","legend","tooltips","mode","intersect","callbacks","label","tooltipItem","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","height","datasets","backgroundColor","borderColor","App","setCountries","setCountry","country_info","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","res","name","iso2","getCountries","onCountryChange","e","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7db3d448.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, CardContent, Typography} from '@material-ui/core';\r\n\r\nfunction InfoBox({title, cases,isRed,active, total, ...props}) {\r\n    return (\r\n        <Card  onClick = {props.onClick} className ={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`} >\r\n            <CardContent>\r\n                <Typography className=\"infoBox_title\" color = \"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox_total\" color = \"textSecondary\">{total} Total </Typography> \r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      // rgb: \"rgb(204,16,52)\",\r\n      // half_op: \"rgba(204,16,52,0.5)\",\r\n      mulitiplier: 800,\r\n    },\r\n  \r\n    recovered: {\r\n      hex: \"#7DD71D\",\r\n      // rgb: \"rgb(125,215,29)\",\r\n      // half_op: \"rgba(125,215,29,0.5)\",\r\n      mulitiplier: 1200,\r\n    },\r\n  \r\n    deaths: {\r\n      hex: \"#CC1034\",\r\n      // rgb: \"rgb(251,68,67)\",\r\n      // half_op: \"rgba(251,68,67,0.5)\",\r\n      mulitiplier: 2000,\r\n    },\r\n  };\r\n\r\nexport const sortData = (data) =>{\r\n    const sortedData = [...data]\r\n    sortedData.sort((a,b) =>{\r\n        if(a.cases>b.cases){\r\n            return -1;\r\n        } else{\r\n            return 1;\r\n        }\r\n    });\r\n\r\n    return sortedData;\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType) =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      pathOptions={{\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      }}\r\n      radius={\r\n        Math.sqrt(country[casesType] / 10) *\r\n        casesTypeColors[casesType].mulitiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  function ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <MapContainer\r\n      casesType={casesType}\r\n      className=\"map\"\r\n      center={center}\r\n      zoom={zoom}\r\n      scrollWheelZoom={false}\r\n    >\r\n      <ChangeView center={center} zoom={zoom} />\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {showDataOnMap(countries, casesType)}\r\n    </MapContainer>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react'\r\nimport numeral from \"numeral\";\r\n\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) =>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  scales: {  \r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MMM/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  maintainAspectRatio: false,\r\n  plugins: {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  \r\n \r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  \r\n}\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          // console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n        // width={100}\r\n\t      height={200}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Card, FormControl, Select,CardContent} from '@material-ui/core'\r\nimport { MenuItem } from '@material-ui/core';\r\nimport InfoBox from './InfoBox';\r\nimport Map from './Map';\r\nimport Table from './Table'\r\nimport './Table.css'\r\nimport  {sortData, prettyPrintStat} from './util'\r\nimport LineGraph from './LineGraph';\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport './infobox.css'\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState('worldwide');\r\n  const [country_info, setCountryInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n\r\n\r\n  useEffect(()=>{\r\n     fetch('https://disease.sh/v3/covid-19/all')\r\n    .then(res => res.json())\r\n    .then(data =>{\r\n      setCountryInfo(data);\r\n    })\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n\r\n    const getCountries = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n      .then( (res) => res.json())\r\n      .then((data) => {\r\n        const countries = data.map((country) => (\r\n          {\r\n            name: country.country,\r\n            value: country.countryInfo.iso2\r\n          }\r\n        ))\r\n        const sortedData = sortData(data)\r\n      setCountries(countries);\r\n      setMapCountries(data);\r\n      setTableData(sortedData);\r\n        \r\n      })\r\n    } \r\n    getCountries();\r\n  }, []);\r\n\r\n  const onCountryChange = async (e) =>{\r\n    const countryCode = e.target.value;\r\n\r\n    const url = countryCode === 'worldwide' \r\n    ? 'https://disease.sh/v3/covid-19/all'\r\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n\r\n    await fetch(url)\r\n    .then(res => res.json())\r\n    .then(data =>{\r\n      setCountry(countryCode);\r\n      setCountryInfo(data);\r\n      if(countryCode !== 'worldwide') setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n        setMapZoom(4);\r\n    })\r\n\r\n  }\r\n  console.log(country_info)\r\n  \r\n  \r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app_left\">\r\n        <div className=\"app_header\">\r\n          <h1>Covid19 Tracker App</h1>\r\n          <FormControl className=\"app_dropdown\">\r\n            <Select variant=\"outlined\" value={country} onChange= {onCountryChange}>\r\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n                  {\r\n                    countries.map(country =>(\r\n                      <MenuItem value={country.value}>{country.name}</MenuItem>\r\n                    ))\r\n                  }\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        \r\n        <div className=\"app_stats\">\r\n              < InfoBox\r\n              isRed\r\n              active = {casesType === 'cases'}\r\n              onClick = {e => setCasesType('cases')}\r\n              title=\"CoronaVirus Cases\" \r\n              cases ={prettyPrintStat(country_info.todayCases)}  \r\n              total={prettyPrintStat(country_info.cases)} />\r\n              \r\n              < InfoBox\r\n              active = {casesType === 'recovered'}\r\n              onClick = {e => setCasesType('recovered')}\r\n              title=\"Recovered\" \r\n              cases = {prettyPrintStat(country_info.todayRecovered)} \r\n              total={prettyPrintStat(country_info.recovered)}/>\r\n              \r\n              < InfoBox\r\n              isRed\r\n              active = {casesType === 'deaths'}\r\n              onClick = {e => setCasesType('deaths')}\r\n              title=\"Deaths\" \r\n              cases = {prettyPrintStat(country_info.todayDeaths)} \r\n              total={prettyPrintStat(country_info.deaths)}/>\r\n        </div>\r\n\r\n        <div>\r\n        <Map\r\n          countries={mapCountries}\r\n          casesType={casesType}\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n        />\r\n        </div>\r\n      </div>\r\n      <Card className=\"app_right\">\r\n        <CardContent>\r\n          <h3>Live cases by country</h3>\r\n          <Table countries = {tableData}/>\r\n\r\n          <h3 className = \"app__graphTitle\">Worldwide new  {casesType}</h3>\r\n          <LineGraph className=\"app_graph\" casesType = {casesType}/>\r\n          \r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}